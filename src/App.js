import React, {useState, useEffect} from "react";

import "./App.scss"

function App() {
  // number of ships of grid size 1, 2, 3, 4, 5. 
  const [shipRemain, setShipRemain] = useState([0,1,2,1,1])
  // 0 = Clear; 1 = Miss; 2 = Hit; 3 = Sunk
  const [grid, setGrid] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

  // probability grid. Higher number in cell means more likely for ship to be there
  const [probGrid, setProbGrid] = useState([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

  const [probGridSettings, setProbGridSetings] = useState({highlightBest: true, showWeight: false})
  
  // location of ship of different lengths. positions of onePos repeated twice to account for two directions of the other ships
  const fivePos = [[0, 1, 2, 3, 4], [1, 2, 3, 4, 5], [2, 3, 4, 5, 6], [3, 4, 5, 6, 7], [4, 5, 6, 7, 8], [5, 6, 7, 8, 9], [10, 11, 12, 13, 14], [11, 12, 13, 14, 15], [12, 13, 14, 15, 16], [13, 14, 15, 16, 17], [14, 15, 16, 17, 18], [15, 16, 17, 18, 19], [20, 21, 22, 23, 24], [21, 22, 23, 24, 25], [22, 23, 24, 25, 26], [23, 24, 25, 26, 27], [24, 25, 26, 27, 28], [25, 26, 27, 28, 29], [30, 31, 32, 33, 34], [31, 32, 33, 34, 35], [32, 33, 34, 35, 36], [33, 34, 35, 36, 37], [34, 35, 36, 37, 38], [35, 36, 37, 38, 39], [40, 41, 42, 43, 44], [41, 42, 43, 44, 45], [42, 43, 44, 45, 46], [43, 44, 45, 46, 47], [44, 45, 46, 47, 48], [45, 46, 47, 48, 49], [50, 51, 52, 53, 54], [51, 52, 53, 54, 55], [52, 53, 54, 55, 56], [53, 54, 55, 56, 57], [54, 55, 56, 57, 58], [55, 56, 57, 58, 59], [60, 61, 62, 63, 64], [61, 62, 63, 64, 65], [62, 63, 64, 65, 66], [63, 64, 65, 66, 67], [64, 65, 66, 67, 68], [65, 66, 67, 68, 69], [70, 71, 72, 73, 74], [71, 72, 73, 74, 75], [72, 73, 74, 75, 76], [73, 74, 75, 76, 77], [74, 75, 76, 77, 78], [75, 76, 77, 78, 79], [80, 81, 82, 83, 84], [81, 82, 83, 84, 85], [82, 83, 84, 85, 86], [83, 84, 85, 86, 87], [84, 85, 86, 87, 88], [85, 86, 87, 88, 89], [90, 91, 92, 93, 94], [91, 92, 93, 94, 95], [92, 93, 94, 95, 96], [93, 94, 95, 96, 97], [94, 95, 96, 97, 98], [95, 96, 97, 98, 99], [0, 10, 20, 30, 40], [1, 11, 21, 31, 41], [2, 12, 22, 32, 42], [3, 13, 23, 33, 43], [4, 14, 24, 34, 44], [5, 15, 25, 35, 45], [6, 16, 26, 36, 46], [7, 17, 27, 37, 47], [8, 18, 28, 38, 48], [9, 19, 29, 39, 49], [10, 20, 30, 40, 50], [11, 21, 31, 41, 51], [12, 22, 32, 42, 52], [13, 23, 33, 43, 53], [14, 24, 34, 44, 54], [15, 25, 35, 45, 55], [16, 26, 36, 46, 56], [17, 27, 37, 47, 57], [18, 28, 38, 48, 58], [19, 29, 39, 49, 59], [20, 30, 40, 50, 60], [21, 31, 41, 51, 61], 
  [22, 32, 42, 52, 62], [23, 33, 43, 53, 63], [24, 34, 44, 54, 64], [25, 35, 45, 55, 65], [26, 36, 46, 56, 66], [27, 37, 47, 57, 67], [28, 38, 48, 58, 68], [29, 39, 49, 59, 69], [30, 40, 50, 60, 70], [31, 41, 51, 61, 71], [32, 42, 52, 62, 72], [33, 43, 53, 63, 73], [34, 44, 54, 64, 74], [35, 45, 55, 65, 75], [36, 46, 56, 66, 76], [37, 47, 57, 67, 77], [38, 48, 58, 68, 78], [39, 49, 59, 69, 79], [40, 50, 60, 70, 80], [41, 51, 61, 71, 81], [42, 52, 62, 72, 82], [43, 53, 63, 73, 83], [44, 54, 64, 74, 84], [45, 55, 65, 75, 85], [46, 56, 66, 76, 86], [47, 57, 67, 77, 87], [48, 58, 68, 78, 88], [49, 59, 69, 79, 89], [50, 60, 70, 80, 90], [51, 61, 71, 81, 91], [52, 62, 72, 82, 92], [53, 63, 73, 83, 93], [54, 64, 74, 84, 94], [55, 65, 75, 85, 95], [56, 66, 76, 86, 96], [57, 67, 77, 87, 97], [58, 68, 78, 88, 98], [59, 69, 79, 89, 99]]
  const fourPos = [[0, 1, 2, 3], [1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [4, 5, 6, 7], [5, 6, 7, 8], [6, 7, 8, 9], [10, 11, 12, 13], [11, 12, 13, 14], [12, 13, 14, 15], [13, 14, 15, 16], [14, 15, 16, 17], [15, 16, 17, 18], [16, 17, 18, 19], [20, 21, 22, 23], [21, 22, 23, 24], [22, 23, 24, 25], [23, 24, 25, 26], [24, 25, 26, 27], [25, 26, 27, 28], [26, 27, 28, 29], [30, 31, 32, 33], [31, 32, 33, 34], [32, 33, 34, 35], [33, 34, 35, 36], [34, 35, 36, 37], [35, 36, 37, 38], [36, 37, 38, 39], [40, 41, 42, 43], [41, 42, 43, 44], [42, 43, 44, 45], [43, 44, 45, 46], [44, 45, 46, 47], [45, 46, 47, 48], [46, 47, 48, 49], [50, 51, 52, 53], [51, 52, 53, 54], [52, 53, 54, 55], [53, 54, 55, 56], [54, 55, 56, 57], [55, 56, 57, 58], [56, 57, 58, 59], [60, 61, 62, 63], [61, 62, 63, 64], [62, 63, 64, 65], [63, 64, 65, 66], [64, 65, 66, 67], [65, 66, 67, 68], [66, 67, 68, 69], [70, 71, 72, 73], [71, 72, 73, 74], [72, 73, 74, 75], [73, 74, 75, 76], [74, 75, 76, 77], [75, 76, 77, 78], [76, 77, 78, 79], [80, 81, 82, 83], [81, 82, 83, 84], [82, 83, 84, 85], [83, 84, 85, 86], [84, 85, 86, 87], [85, 86, 87, 88], [86, 87, 88, 89], [90, 91, 92, 93], [91, 92, 93, 94], [92, 93, 94, 95], [93, 94, 95, 96], [94, 95, 96, 97], [95, 96, 97, 98], [96, 97, 98, 99], [0, 10, 20, 30], [1, 11, 21, 31], [2, 12, 22, 32], [3, 13, 23, 33], [4, 14, 24, 34], [5, 15, 25, 35], [6, 16, 26, 36], [7, 17, 27, 37], [8, 18, 28, 38], [9, 19, 29, 39], [10, 20, 30, 40], [11, 21, 31, 41], [12, 22, 32, 42], [13, 23, 33, 43], [14, 24, 34, 44], [15, 25, 35, 45], [16, 26, 36, 46], [17, 27, 37, 47], [18, 28, 38, 48], [19, 29, 39, 49], [20, 30, 40, 50], [21, 31, 41, 51], [22, 32, 42, 52], [23, 33, 43, 53], [24, 34, 44, 54], [25, 35, 45, 55], [26, 36, 46, 56], [27, 37, 47, 57], [28, 38, 48, 58], [29, 39, 49, 59], [30, 40, 50, 60], 
  [31, 41, 51, 61], [32, 42, 52, 62], [33, 43, 53, 63], [34, 44, 54, 64], [35, 45, 55, 65], [36, 46, 56, 66], [37, 47, 57, 67], [38, 48, 58, 68], [39, 49, 59, 69], [40, 50, 60, 70], [41, 51, 61, 71], [42, 52, 62, 72], [43, 53, 63, 73], [44, 54, 64, 74], [45, 55, 65, 75], [46, 56, 66, 76], [47, 57, 67, 77], [48, 58, 68, 78], [49, 59, 69, 79], [50, 60, 70, 80], [51, 61, 71, 81], [52, 62, 72, 82], [53, 63, 73, 83], [54, 64, 74, 84], [55, 65, 75, 85], [56, 66, 76, 86], [57, 67, 77, 87], [58, 68, 78, 88], [59, 69, 79, 89], [60, 70, 80, 90], [61, 71, 81, 91], [62, 72, 82, 92], [63, 73, 83, 93], [64, 74, 84, 94], [65, 75, 85, 95], [66, 76, 86, 96], [67, 77, 87, 97], [68, 78, 88, 98], [69, 79, 89, 99]]
  const threePos = [[0, 1, 2], [1, 2, 3], [2, 3, 4], [3, 4, 5], [4, 5, 6], [5, 6, 7], [6, 7, 8], [7, 8, 9], [10, 11, 12], [11, 12, 13], [12, 13, 14], [13, 14, 15], [14, 15, 16], [15, 16, 17], [16, 17, 18], [17, 18, 19], [20, 21, 22], [21, 22, 23], [22, 23, 24], [23, 24, 25], [24, 25, 26], [25, 26, 27], [26, 27, 28], [27, 28, 29], [30, 31, 32], [31, 32, 33], [32, 33, 34], [33, 34, 35], [34, 35, 36], [35, 36, 37], [36, 37, 38], [37, 38, 39], [40, 41, 42], [41, 42, 43], [42, 43, 44], [43, 44, 45], [44, 45, 46], [45, 46, 47], [46, 47, 48], [47, 48, 49], [50, 51, 52], [51, 52, 53], [52, 53, 54], [53, 54, 55], [54, 55, 56], [55, 56, 57], [56, 57, 58], [57, 58, 59], [60, 61, 62], [61, 62, 63], [62, 63, 64], [63, 64, 65], [64, 65, 66], [65, 66, 67], [66, 67, 68], [67, 68, 69], [70, 71, 72], [71, 72, 73], [72, 73, 74], [73, 74, 75], [74, 75, 76], [75, 76, 77], [76, 77, 78], [77, 78, 79], [80, 81, 82], [81, 82, 83], [82, 83, 84], [83, 84, 85], [84, 85, 86], [85, 86, 87], [86, 87, 88], [87, 88, 89], [90, 91, 92], [91, 92, 93], [92, 93, 94], [93, 94, 95], [94, 95, 96], [95, 96, 97], [96, 97, 98], [97, 98, 99], [0, 10, 20], [1, 11, 21], [2, 12, 22], [3, 13, 23], [4, 14, 24], [5, 15, 25], [6, 16, 26], [7, 17, 27], [8, 18, 28], [9, 19, 29], [10, 20, 30], [11, 21, 31], [12, 22, 32], [13, 23, 33], [14, 24, 34], [15, 25, 35], [16, 26, 36], [17, 27, 37], [18, 28, 38], [19, 29, 39], [20, 30, 40], [21, 31, 41], [22, 32, 42], [23, 33, 43], [24, 34, 44], [25, 35, 45], [26, 36, 46], [27, 37, 47], [28, 38, 48], [29, 39, 49], [30, 40, 50], [31, 41, 51], [32, 42, 52], [33, 43, 53], [34, 44, 54], [35, 45, 55], [36, 46, 56], [37, 47, 57], [38, 48, 58], [39, 49, 59], [40, 50, 60], [41, 51, 61], [42, 52, 62], [43, 53, 63], [44, 54, 64], [45, 55, 65], [46, 56, 66], [47, 57, 67], [48, 58, 68], [49, 59, 69], [50, 60, 70], [51, 61, 71], [52, 62, 72], [53, 63, 73], [54, 64, 74], [55, 65, 75], [56, 66, 76], [57, 67, 77], [58, 68, 78], [59, 69, 79], [60, 70, 80], [61, 71, 81], [62, 72, 82], [63, 73, 83], [64, 74, 84], [65, 75, 85], [66, 76, 86], [67, 77, 87], [68, 78, 88], [69, 79, 89], [70, 80, 90], [71, 81, 91], [72, 82, 92], [73, 83, 93], [74, 84, 94], [75, 85, 95], [76, 86, 96], [77, 87, 97], [78, 88, 98], [79, 89, 99]]
  const twoPos = [[0, 1], [1, 2], [2, 3], [3, 4], [4, 5], [5, 6], [6, 7], [7, 8], [8, 9], [10, 11], [11, 12], [12, 13], [13, 14], [14, 15], [15, 16], [16, 17], [17, 18], [18, 19], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, 38], [38, 39], [40, 41], [41, 42], [42, 43], [43, 44], [44, 45], [45, 46], [46, 47], [47, 48], [48, 49], [50, 51], [51, 52], [52, 53], [53, 54], [54, 55], [55, 56], [56, 57], [57, 58], [58, 59], [60, 61], [61, 62], [62, 63], [63, 64], [64, 65], [65, 66], [66, 67], [67, 68], [68, 69], [70, 71], [71, 72], [72, 73], [73, 74], [74, 75], [75, 76], [76, 77], [77, 78], [78, 79], [80, 81], [81, 82], [82, 83], [83, 84], [84, 85], [85, 86], [86, 87], [87, 88], [88, 89], [90, 91], [91, 92], [92, 93], [93, 94], [94, 95], [95, 96], [96, 97], [97, 98], [98, 99], [0, 10], [1, 11], [2, 12], [3, 13], [4, 14], [5, 15], [6, 16], [7, 17], [8, 18], [9, 19], [10, 20], [11, 21], [12, 22], [13, 23], [14, 24], [15, 25], [16, 26], [17, 27], [18, 28], [19, 29], [20, 30], [21, 31], [22, 32], [23, 33], [24, 34], [25, 35], [26, 36], [27, 37], [28, 38], [29, 39], [30, 40], [31, 41], [32, 42], [33, 43], [34, 44], [35, 45], [36, 46], [37, 47], [38, 48], [39, 49], [40, 50], [41, 51], [42, 52], [43, 53], [44, 54], [45, 55], [46, 56], [47, 57], [48, 58], [49, 59], [50, 60], [51, 61], [52, 62], [53, 63], [54, 64], [55, 65], [56, 66], [57, 67], [58, 68], [59, 69], [60, 70], [61, 71], [62, 72], [63, 73], [64, 74], [65, 75], [66, 76], [67, 77], [68, 78], [69, 79], [70, 80], [71, 81], [72, 82], [73, 83], [74, 84], [75, 85], [76, 86], [77, 87], [78, 88], [79, 89], [80, 90], [81, 91], [82, 92], [83, 93], [84, 94], [85, 95], [86, 96], [87, 97], [88, 98], [89, 99]]
  const onePos
  const allPos = [onePos, twoPos, threePos, fourPos, fivePos]

  useEffect(findProb, [grid, shipRemain])


  function findProb() {
    let newProbGrid = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

    for (let [shipIndex, shipPos] of allPos.entries()) {
      let remain = shipRemain[shipIndex]
      // must have one ship alive in size class to check
      if (remain === 0) {
        continue
      }
      for (let positionList of shipPos) {
        // all cells of positionList must be '0', clear; or '2', hit
        if (positionList.some(posIdx => {return ((grid[posIdx] === 1) || (grid[posIdx] === 3))})) {
          continue
        }
        let weight = 1 + (positionList.filter(posIdx => grid[posIdx] === 2).length * 4)
        positionList.forEach(posIdx => {
          if (grid[posIdx] === 0) {
            return newProbGrid[posIdx] += weight
          }
        })

      }

    }
    setProbGrid(oldgrid => newProbGrid)
  }


  function mutateGrid(idx) {
    console.log(idx)
    let newGrid = [...grid]
    newGrid[idx] = (newGrid[idx] + 1) % 4
    setGrid(oldGrid => newGrid)
  }

  function mutateShipRemain(idx, change) {
    let newShipRemain = [...shipRemain]
    newShipRemain[idx] += change
    if (newShipRemain[idx] < 0) {
      newShipRemain[idx] = 0
    }
    setShipRemain(oldShipRemain => newShipRemain)

  }

  function clearBoard() {
    let newGrid = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
    setGrid(oldGrid => newGrid)

  }



  return (
    <div className="app">


      <div className="settings">


        <div className="settingsContainer">
          <h1>shipStatus</h1>
          <div className="shipStatusContainer">
            {
              shipRemain.map((shipCount, idx) => {
                return (
                  <div className="shipStatus" key={idx}>
                    <h4>{"□".repeat(idx + 1)}, {shipCount}</h4>
                    <button onClick={e => mutateShipRemain(idx, 1)}>UP</button>
                    <button onClick={e => mutateShipRemain(idx, -1)}>DOWN</button>
                  </div>
                )
              })
            }
          </div>
        </div>

        <div className="settingsContainer">
          <h1>Display Settings</h1>
          <div className="shipSettings">
            <button onClick={() => clearBoard()}>Clear Board</button>
            <span><input type="checkbox" />Show Probability Weighting</span>
            <span><input type="checkbox" />Highlight Optimal Move</span>
          </div>
        </div>

      </div>



      <div className="grids">
        <div className="boardContainer">
          <h1>statusBoard</h1>

          <div className="board">
            {grid.map((cell, index) => {
              return <div key={index} className="cell"><button onClick={e => mutateGrid(index)}>{cell}</button></div>
            })}
          </div>
        </div>


        <div className="boardContainer">
          <h1>probBoard</h1>
          <div className="board">
            {probGrid.map((cell, index) => {
              const maxWeight = Math.max.apply(Math, probGrid)
              const shading = 100 - ((cell / maxWeight) * 75)
              return (
              <div key={index} className={
                ` 
                  cell 
                  ${probGridSettings.showWeight ? "showWeight" : ""} 
                  ${(probGridSettings.highlightBest && cell === maxWeight) ? "highlightCell" : ""}
                  `
              }>
                <button 
                  style={{"backgroundColor": `hsla(50, 0%, ${shading}%, 1)`}}>{cell}
                </button>
              </div>)
            })}
          </div>
        </div>
      </div>




  </div>
  )
}

export default App;
